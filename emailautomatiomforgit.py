# -*- coding: utf-8 -*-
"""EmailAutomatiomForGit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yRND-uPI0UkRCFErx0MhhNRh6G2wB3Tm

# Email Automation with Python

## Overview

`Email Automation with Python` is a lightweight script that demonstrates how to send plain-text and HTML emails via Gmail’s SMTP server using Python. This documentation covers setup, configuration, usage, and suggestions for enhancements to turn it into a production-ready tool.

---

## Features

* Secure connection over SSL to Gmail’s SMTP server
* Support for both plain-text and HTML email bodies
* Easy-to-adapt variables for sender, recipient, subject, and message content
* Interactive prompt for entering the App Password (keeping credentials out of code)

---

## Prerequisites

* Python 3.7 or higher
* A Gmail account with 2-Step Verification enabled
* An App Password generated for "Mail" in your Google Account security settings
* Internet access to connect to `smtp.gmail.com`

---

## Installation

1. **Clone the repository** (or download the notebook/script):

   ```bash
   git clone https://github.com/yourusername/email-automation.git
   cd email-automation
   ```

2. **Create and activate a virtual environment** (recommended):

   ```bash
   python3 -m venv env
   source env/bin/activate    # macOS/Linux
   env\\Scripts\\activate   # Windows
   ```

3. **Install dependencies**:

   ```bash
   pip install -r requirements.txt
   ```

   > **requirements.txt** should contain:
   >
   > ```
   > secure-smtplib
   > email
   > ```

---

## Configuration

1. **App Password**
   Generate a 16-character App Password in your Google Account (Security > App passwords). Copy it for use in the script.

2. **Environment Variables (optional)**
   To avoid entering the password each run, export variables in your shell or use a `.env` file:

   ```bash
   export EMAIL_ADDRESS="projectmailer122@gmail.com"
   export EMAIL_PASSWORD="your_app_password_here"
   ```

3. **Configuration file (optional)**
   Create `config.yml` to hold settings:

   ```yaml
   sender: "sender@example.com"
   receiver: "recipient@example.com"
   subject: "Email From Python"
   body: "This is a test email from Python!"
   smtp_server: "smtp.gmail.com"
   port: 465
   ```

---

## Usage

1. **Interactive run**:

   ```bash
   python email_automation.py
   ```

   You will be prompted to enter the App Password.

2. **Non-interactive with env vars**:

   ```bash
   EMAIL_PASSWORD="$EMAIL_PASSWORD" python email_automation.py
   ```

3. **Specifying arguments via CLI** (if extended with `argparse`):

   ```bash
   python email_automation.py --to recipient@example.com --subject "Hello" --body "Hi there!"
   ```


---
"""

import smtplib
import ssl
from email.message import EmailMessage

subject = "Email From Python"
body = "This is a test email from Python!"
sender_email = "sender@example.com"
receiver_email = "recipient@example.com"
password = input("Enter a password: ")

message = EmailMessage()
message["From"] = sender_email
message["To"] = receiver_email
message["Subject"] = subject
#The content of the email
message.set_content(body)

#A simple mail
html = f"""
<html>
  <body>
    <h1 style="color:SlateGray;">This is an HTML Email!</h1>
    <p>This is a paragraph.</p>
    <p>This is another paragraph.</p>
  </body>
</html>
"""

#The content
message.add_alternative(html, subtype="html")

#A secure connection to Gmail. Context for a secure connection which can be use in the ssl library to the Gmail server.
context = ssl.create_default_context()

print("Sending Email!")

#connect with the secure soccet layer. Connectiong to the Gmail server. We need a secure way so we use ssl.
with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
    #Uses the server to log in to our email account so we can send an email.
    server.login(sender_email, password)
    #Sends our email. We convert the message object to a string so we can send it as a string email.
    server.sendmail(sender_email, receiver_email, message.as_string())

print("Success")